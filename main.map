Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
                              /tmp/ccZdqnnF.o (__do_copy_data)
/usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
                              /tmp/ccZdqnnF.o (__do_clear_bss)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
LOAD /tmp/ccZdqnnF.o
LOAD /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000       0xba
 *(.vectors)
 .vectors       0x0000000000000000       0x26 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
 .progmem.data  0x0000000000000026        0xe /tmp/ccZdqnnF.o
                0x0000000000000034                . = ALIGN (0x2)
                0x0000000000000034                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000034        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000034                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000034                __ctors_start = .
 *(.ctors)
                0x0000000000000034                __ctors_end = .
                0x0000000000000034                __dtors_start = .
 *(.dtors)
                0x0000000000000034                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000034        0x0 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
                0x0000000000000034                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000034        0xc /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000040       0x16 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
                0x0000000000000040                __do_copy_data
 .init4         0x0000000000000056       0x10 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
                0x0000000000000056                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000066        0x4 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x000000000000006a        0x2 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
                0x000000000000006a                __vector_1
                0x000000000000006a                __vector_12
                0x000000000000006a                __bad_interrupt
                0x000000000000006a                __vector_6
                0x000000000000006a                __vector_3
                0x000000000000006a                __vector_11
                0x000000000000006a                __vector_13
                0x000000000000006a                __vector_17
                0x000000000000006a                __vector_7
                0x000000000000006a                __vector_5
                0x000000000000006a                __vector_4
                0x000000000000006a                __vector_9
                0x000000000000006a                __vector_2
                0x000000000000006a                __vector_15
                0x000000000000006a                __vector_8
                0x000000000000006a                __vector_14
                0x000000000000006a                __vector_10
                0x000000000000006a                __vector_16
                0x000000000000006a                __vector_18
 .text          0x000000000000006c       0x30 /tmp/ccZdqnnF.o
                0x000000000000006c                USART_get_char
                0x0000000000000074                USART_send_char
                0x000000000000007c                USART_send_str_P
 .text          0x000000000000009c        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
 .text          0x000000000000009c        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
 .text          0x000000000000009c        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
                0x000000000000009c                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000000000000009c       0x1a /tmp/ccZdqnnF.o
                0x000000000000009c                main
 .text.libgcc   0x00000000000000b6        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000000b6        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000000b6        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
                0x00000000000000b6                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000000b6        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
                0x00000000000000b6                exit
                0x00000000000000b6                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000000b6        0x4 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000000ba                _etext = .

.data           0x0000000000800060        0x0 load address 0x00000000000000ba
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
 .data          0x0000000000800060        0x0 /tmp/ccZdqnnF.o
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800060                . = ALIGN (0x2)
                0x0000000000800060                _edata = .
                0x0000000000800060                PROVIDE (__data_end, .)

.bss            0x0000000000800060        0x0
                0x0000000000800060                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
 .bss           0x0000000000800060        0x0 /tmp/ccZdqnnF.o
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
 .bss           0x0000000000800060        0x0 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
                0x0000000000800060                PROVIDE (__bss_end, .)
                0x00000000000000ba                __data_load_start = LOADADDR (.data)
                0x00000000000000ba                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800060        0x0
                0x0000000000800060                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800060                PROVIDE (__noinit_end, .)
                0x0000000000800060                _end = .
                0x0000000000800060                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.stab           0x0000000000000000      0x834
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o
 .stab          0x00000000000006cc       0x54 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_exit.o)
                                         0x60 (size before relaxing)
 .stab          0x0000000000000720       0x9c /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_copy_data.o)
                                         0xa8 (size before relaxing)
 .stab          0x00000000000007bc       0x78 /usr/lib/gcc/avr/4.6.3/avr4/libgcc.a(_clear_bss.o)
                                         0x84 (size before relaxing)

.stabstr        0x0000000000000000       0xc5
 *(.stabstr)
 .stabstr       0x0000000000000000       0xc5 /usr/lib/gcc/avr/4.6.3/../../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
